// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.fy.baselibrary.retrofit;

import com.fy.baselibrary.retrofit.cookie.AddCookiesInterceptor;
import com.fy.baselibrary.retrofit.cookie.ReceivedCookiesInterceptor;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

public final class RequestModule_GetClientFactory implements Factory<OkHttpClient> {
  private final RequestModule module;

  private final Provider<ReceivedCookiesInterceptor> receivedCookiesInterceptorProvider;

  private final Provider<AddCookiesInterceptor> addCookiesInterceptorProvider;

  private final Provider<HttpLoggingInterceptor> interceptorProvider;

  private final Provider<Interceptor> headerProvider;

  public RequestModule_GetClientFactory(
      RequestModule module,
      Provider<ReceivedCookiesInterceptor> receivedCookiesInterceptorProvider,
      Provider<AddCookiesInterceptor> addCookiesInterceptorProvider,
      Provider<HttpLoggingInterceptor> interceptorProvider,
      Provider<Interceptor> headerProvider) {
    assert module != null;
    this.module = module;
    assert receivedCookiesInterceptorProvider != null;
    this.receivedCookiesInterceptorProvider = receivedCookiesInterceptorProvider;
    assert addCookiesInterceptorProvider != null;
    this.addCookiesInterceptorProvider = addCookiesInterceptorProvider;
    assert interceptorProvider != null;
    this.interceptorProvider = interceptorProvider;
    assert headerProvider != null;
    this.headerProvider = headerProvider;
  }

  @Override
  public OkHttpClient get() {
    return Preconditions.checkNotNull(
        module.getClient(
            receivedCookiesInterceptorProvider.get(),
            addCookiesInterceptorProvider.get(),
            interceptorProvider.get(),
            headerProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<OkHttpClient> create(
      RequestModule module,
      Provider<ReceivedCookiesInterceptor> receivedCookiesInterceptorProvider,
      Provider<AddCookiesInterceptor> addCookiesInterceptorProvider,
      Provider<HttpLoggingInterceptor> interceptorProvider,
      Provider<Interceptor> headerProvider) {
    return new RequestModule_GetClientFactory(
        module,
        receivedCookiesInterceptorProvider,
        addCookiesInterceptorProvider,
        interceptorProvider,
        headerProvider);
  }
}
